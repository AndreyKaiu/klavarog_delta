jQuery.extend = jQuery.fn.extend = function() { var target = arguments[0] || {}, i = 1, length = arguments.length, deep = false, options; if ( typeof target === "boolean" ) { deep = target; target = arguments[1] || {}; i = 2;} if ( typeof target !== "object" && !jQuery.isFunction(target) ) target = {}; if ( length == i ) { target = this; --i;} for ( ; i < length; i++ ) if ( (options = arguments[ i ]) != null ) for ( var name in options ) { var src = target[ name ], copy = options[ name ]; if ( target === copy ) continue; if ( deep && copy && typeof copy === "object" && !copy.nodeType ) target[ name ] = jQuery.extend( deep, src || ( copy.length != null ? [ ] : { } ), copy ); else if ( copy !== undefined ) target[ name ] = copy;} return target;};
jQuery.browser = { version: (userAgent.match( /.+(?:rv|it|ra|ie)[\/: ]([\d.]+)/ ) || [0,'0'])[1], safari: /webkit/.test( userAgent ), opera: /opera/.test( userAgent ), msie: /msie/.test( userAgent ) && !/opera/.test( userAgent ), mozilla: /mozilla/.test( userAgent ) && !/(compatible|webkit)/.test( userAgent )};
jQuery.each({ appendTo: "append", prependTo: "prepend", insertBefore: "before", insertAfter: "after", replaceAll: "replaceWith"}, function(name, original){ jQuery.fn[ name ] = function( selector ) { var ret = [], insert = jQuery( selector ); for ( var i = 0, l = insert.length; i < l; i++ ) { var elems = (i > 0 ? this.clone(true) : this).get(); jQuery.fn[ original ].apply( jQuery(insert[i]), elems ); ret = ret.concat( elems );} return this.pushStack( ret, name, selector );};});
jQuery.each({ removeAttr: function( name ) { jQuery.attr( this, name, "" ); if (this.nodeType == 1) this.removeAttribute( name );}, addClass: function( classNames ) { jQuery.className.add( this, classNames );}, removeClass: function( classNames ) { jQuery.className.remove( this, classNames );}, toggleClass: function( classNames, state ) { if( typeof state !== "boolean" ) state = !jQuery.className.has( this, classNames ); jQuery.className[ state ? "add" : "remove" ]( this, classNames );}, remove: function( selector ) { if ( !selector || jQuery.filter( selector, [ this ] ).length ) { jQuery( "*", this ).add([this]).each(function(){ jQuery.event.remove(this); jQuery.removeData(this);}); if (this.parentNode) this.parentNode.removeChild( this );}}, empty: function() { jQuery(this).children().remove(); while ( this.firstChild ) this.removeChild( this.firstChild );}}, function(name, fn){ jQuery.fn[ name ] = function(){ return this.each( fn, arguments );};});

def parseLogLevel(arg): if arg.isdigit(): return int(arg) if arg.isupper(): return getattr(logging, arg) raise ValueError(_('%s is not a valid loglevel'), repr(arg))
def parseLogTarget(arg): arg = arg.lower() if arg.startswith('.'): return arg[1:] if arg.startswith('gajim'): return arg return 'gajim.' + arg
def parseAndSetLogLevels(arg): for directive in arg.split(','): directive = directive.strip() targets, level = directive.rsplit('=', 1) level = parseLogLevel(level.strip()) for target in targets.split('='): target = parseLogTarget(target.strip()) if target == '': consoleloghandler.setLevel(level) print "consoleloghandler level set to %s" % level else: logger = logging.getLogger(target) logger.setLevel(level) print "Logger %s level set to %d" % (target, level)
import locale profile = unicode(profile, locale.getpreferredencoding()) import common.configpaths common.configpaths.gajimpaths.init(config_path) del config_path common.configpaths.gajimpaths.init_profile(profile) del profile
if os.name == 'nt': class MyStderr(object): _file = None _error = None def write(self, text): fname=os.path.join(common.configpaths.gajimpaths.root, os.path.split(sys.executable)[1]+'.log') if self._file is None and self._error is None: try: self._file = open(fname, 'a') except Exception, details: self._error = details if self._file is not None: self._file.write(text) self._file.flush() def flush(self): if self._file is not None: self._file.flush() sys.stderr = MyStderr()
if pid_alive(): path_to_file = os.path.join(gajim.DATA_DIR, 'pixmaps/gajim.png') pix = gtk.gdk.pixbuf_new_from_file(path_to_file) gtk.window_set_default_icon(pix) # set the icon to all newly opened wind pritext = _('Gajim is already running') sectext = _('Another instance of Gajim seems to be running\nRun anyway?') dialog = dialogs.YesNoDialog(pritext, sectext) dialog.popup() if dialog.run() != gtk.RESPONSE_YES: sys.exit(3) dialog.destroy() if os.path.exists(pid_filename): os.remove(pid_filename) del path_to_file del pix del pritext del sectext dialog.destroy()
pid_dir =  os.path.dirname(pid_filename) if not os.path.exists(pid_dir): check_paths.create_path(pid_dir) try: f = open(pid_filename, 'w') f.write(str(os.getpid())) f.close() except IOError, e: dlg = dialogs.ErrorDialog(_('Disk Write Error'), str(e)) dlg.run() dlg.destroy() sys.exit() del pid_dir del f
def on_exit(): if os.path.exists(pid_filename): os.remove(pid_filename) gajim.interface.roster.prepare_quit() if sys.platform == 'darwin': try: import osx osx.shutdown() except ImportError: pass

void VBOXCALL supdrvCloseSession(PSUPDRVDEVEXT pDevExt, PSUPDRVSESSION pSession) { supdrvCleanupSession(pDevExt, pSession); RTSpinlockDestroy(pSession->Spinlock); pSession->Spinlock = NIL_RTSPINLOCK; pSession->pDevExt = NULL; RTMemFree(pSession); LogFlow(("supdrvCloseSession: returns\n"));}
int VBOXCALL supdrvIOCtlFast(uintptr_t uIOCtl, VMCPUID idCpu, PSUPDRVDEVEXT pDevExt, PSUPDRVSESSION pSession) { if (RT_LIKELY(pSession->pVM && pDevExt->pfnVMMR0EntryFast)) { switch (uIOCtl) { case SUP_IOCTL_FAST_DO_RAW_RUN: #ifdef RT_WITH_W64_UNWIND_HACK supdrvNtWrapVMMR0EntryFast((PFNRT)pDevExt->pfnVMMR0EntryFast, pSession->pVM, idCpu, SUP_VMMR0_DO_RAW_RUN); #else pDevExt->pfnVMMR0EntryFast(pSession->pVM, idCpu, SUP_VMMR0_DO_RAW_RUN); #endif break; case SUP_IOCTL_FAST_DO_HWACC_RUN: #ifdef RT_WITH_W64_UNWIND_HACK supdrvNtWrapVMMR0EntryFast((PFNRT)pDevExt->pfnVMMR0EntryFast, pSession->pVM, idCpu, SUP_VMMR0_DO_HWACC_RUN); #else pDevExt->pfnVMMR0EntryFast(pSession->pVM, idCpu, SUP_VMMR0_DO_HWACC_RUN); #endif break; case SUP_IOCTL_FAST_DO_NOP: #ifdef RT_WITH_W64_UNWIND_HACK supdrvNtWrapVMMR0EntryFast((PFNRT)pDevExt->pfnVMMR0EntryFast, pSession->pVM, idCpu, SUP_VMMR0_DO_NOP); #else pDevExt->pfnVMMR0EntryFast(pSession->pVM, idCpu, SUP_VMMR0_DO_NOP); #endif break; default: return VERR_INTERNAL_ERROR;} return VINF_SUCCESS; } return VERR_INTERNAL_ERROR; }
static int supdrvCheckInvalidChar(const char *pszStr, const char *pszChars) { int chCur; while ((chCur = *pszStr++) != '\0') { int ch; const char *psz = pszChars; while ((ch = *psz++) != '\0') if (ch == chCur) return 1; } return 0; }
static unsigned _strnlenUtf16(PCRTUTF16 pwsz, unsigned cchMax) { #ifdef IN_RING3 unsigned cwc = 0; while (cchMax-- > 0) { RTUNICP cp; int rc = RTUtf16GetCpEx(&pwsz, &cp); AssertRC(rc); if (RT_FAILURE(rc) || !cp) break; cwc++; } return cwc; #else PCRTUTF16 pwszC = pwsz; while (cchMax-- > 0 &&  *pwsz != '\0') pwsz++; return (unsigned)(pwsz - pwszC); #endif }
RTDECL(size_t) RTStrFormat(PFNRTSTROUTPUT pfnOutput, void *pvArgOutput, PFNSTRFORMAT pfnFormat, void *pvArgFormat, const char *pszFormat, ...) { size_t cch; va_list args; va_start(args, pszFormat); cch = RTStrFormatV(pfnOutput, pvArgOutput, pfnFormat, pvArgFormat, pszFormat, args); va_end(args); return cch; }

class cookie_Core { public static function set($name, $value = NULL, $expire = NULL, $path = NULL, $domain = NULL, $secure = NULL, $httponly = NULL) { if (headers_sent()) return FALSE; is_array($name) and extract($name, EXTR_OVERWRITE); $config = Kohana::config('cookie'); foreach (array('value', 'expire', 'domain', 'path', 'secure', 'httponly') as $item) { if ($$item === NULL AND isset($config[$item])) { $$item = $config[$item]; } } $expire = ($expire == 0) ? 0 : time() + (int) $expire; return setcookie($name, $value, $expire, $path, $domain, $secure, $httponly); } public static function get($name, $default = NULL, $xss_clean = FALSE) { return Input::instance()->cookie($name, $default, $xss_clean); } public static function delete($name, $path = NULL, $domain = NULL) { if ( ! isset($_COOKIE[$name])) return FALSE; unset($_COOKIE[$name]); return cookie::set($name, '', -86400, $path, $domain, FALSE, FALSE); } }
abstract class Template_Controller extends Controller { public $template = 'template'; public $auto_render = TRUE; public function __construct() { parent::__construct(); $this->template = new View($this->template); if ($this->auto_render == TRUE) { Event::add('system.post_controller', array($this, '_render')); } } public function _render() { if ($this->auto_render == TRUE) { $this->template->render(TRUE); } } }
public static function log_directory($dir = NULL) { static $directory; if ( ! empty($dir)) { $dir = realpath($dir); if (is_dir($dir) AND is_writable($dir)) { $directory = str_replace('\\', '/', $dir).'/'; } else { throw new Kohana_Exception('core.log_dir_unwritable', $dir); } } return $directory; }
public function rotate($degrees) { $degrees = (int) $degrees; if ($degrees > 180) { do { $degrees -= 360; } while($degrees > 180); } if ($degrees < -180) { do { $degrees += 360; } while($degrees < -180); } $this->actions['rotate'] = $degrees; return $this; }
public function save($new_image = FALSE, $chmod = 0644, $keep_actions = FALSE) { empty($new_image) and $new_image = $this->image['file']; $dir  = pathinfo($new_image, PATHINFO_DIRNAME); $file = pathinfo($new_image, PATHINFO_BASENAME); $dir = str_replace('\\', '/', realpath($dir)).'/'; if ( ! is_writable($dir)) throw new Kohana_Exception('image.directory_unwritable', $dir); if ($status = $this->driver->process($this->image, $this->actions, $dir, $file)) { if ($chmod !== FALSE) { chmod($new_image, $chmod); } } if ($keep_actions === FALSE) $this->actions = array(); return $status; }
<?php defined('SYSPATH') OR die('No direct access allowed.'); ?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><style type="text/css"><?php include Kohana::find_file('views', 'kohana_errors', FALSE, 'css') ?></style><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title><?php echo $error ?></title><base href="http://php.net/" /></head><body><div id="framework_error" style="width:42em;margin:20px auto;"><h3><?php echo html::specialchars($error) ?></h3><p><?php echo html::specialchars($description) ?></p><?php if ( ! empty($line) AND ! empty($file)): ?><p><?php echo Kohana::lang('core.error_file_line', $file, $line) ?></p><?php endif ?><p><code class="block"><?php echo $message ?></code></p><?php if ( ! empty($trace)): ?><h3><?php echo Kohana::lang('core.stack_trace') ?></h3><?php echo $trace ?><?php endif ?><p class="stats"><?php echo Kohana::lang('core.stats_footer') ?></p></div></body></html>

html, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, font, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td {margin: 0; padding: 0; border: 0; outline: 0; font-size: 100%; vertical-align: baseline; background: transparent} body {line-height: 1} ol, ul {list-style: none} blockquote, q {quotes: none} blockquote: before, blockquote: after, q: before, q: after {content: ''; content: none} : focus {outline: 0} ins {text-decoration: none} del {text-decoration: line-through} table {border-collapse: collapse; border-spacing: 0}
.container_12, .container_16 {margin-left: auto; margin-right: auto; width: 960px} .grid_1, .grid_2 {display: inline; float: left; position: relative; margin-left: 10px; margin-right: 10px} .container_12 .grid_3, .container_16 .grid_4 {width: 220px} .container_12 .grid_6, .container_16 .grid_8 {width: 460px} .container_12 {width: 700px} .container_12 .grid_12 {width: 940px} .alpha {margin-left: 0} .omega {margin-right: 0} .container_12 .grid_1 {width: 60px} .container_12 .grid_2 {width: 140px} .container_12 .grid_4 {width: 300px} .container_12 .grid_5 {width: 380px} .container_12 .grid_7 {width: 540px} .container_12 .grid_8 {width: 620px} .container_12 .grid_10 {width: 780px} .container_12 .grid_11 {width: 860px} .container_16 .grid_1 {width: 40px} .container_16 .grid_2 {width: 100px} .container_16 .grid_3 {width: 160px} .container_16 .grid_5 {width: 280px} .container_16 .grid_6 {width: 340px} .container_16 .grid_7 {width: 400px} .container_16 .grid_9 {width: 520px} .container_16 .grid_10 {width: 580px} .container_16 .grid_11 {width: 640px} .container_16 .grid_13 {width: 760px} .container_16 .grid_14 {width: 820px} .container_16 .grid_15 {width: 880px} .container_12 .prefix_3, .container_16 .prefix_4 {padding-left: 240px} .container_12 .prefix_6, .container_16 .prefix_8 {padding-left: 480px} .container_12 .prefix_9, .container_16 .prefix_12 {padding-left: 720px} .container_12 .prefix_1 {padding-left: 80px} .container_12 .prefix_2 {padding-left: 160px} .container_12 .prefix_4 {padding-left: 320px} .container_12 .prefix_5 {padding-left: 400px} .container_12 .prefix_7 {padding-left: 560px} .container_12 .prefix_8 {padding-left: 640px} .container_12 .prefix_10 {padding-left: 800px} .container_12 .prefix_11 {padding-left: 880px} .container_16 .prefix_1 {padding-left: 60px} .container_16 .prefix_2 {padding-left: 120px} .container_16 .prefix_3 {padding-left: 180px} .container_16 .prefix_5 {padding-left: 300px} .container_16 .prefix_6 {padding-left: 360px} .container_16 .prefix_7 {padding-left: 420px} .container_16 .prefix_9 {padding-left: 540px} .container_16 .prefix_10 {padding-left: 600px} .container_16 .prefix_11 {padding-left: 660px} .container_16 .prefix_13 {padding-left: 780px} .container_16 .prefix_14 {padding-left: 840px} .container_16 .prefix_15 {padding-left: 900px} .container_12 .suffix_3, .container_16 .suffix_4 {padding-right: 240px} .container_12 .suffix_6, .container_16 .suffix_8 {padding-right: 480px} .container_12 .suffix_9, .container_16 .suffix_12 {padding-right: 720px} .container_12 .suffix_1 {padding-right: 80px} .container_12 .suffix_2 {padding-right: 160px} .container_12 .suffix_4 {padding-right: 320px} .container_12 .suffix_5 {padding-right: 400px} .container_12 .suffix_7 {padding-right: 560px} .container_12 .suffix_8 {padding-right: 640px} .container_12 .suffix_10 {padding-right: 800px} .container_12 .suffix_11 {padding-right: 880px} .container_16 .suffix_1 {padding-right: 60px} .container_16 .suffix_2 {padding-right: 120px} .container_16 .suffix_3 {padding-right: 180px} .container_16 .suffix_5 {padding-right: 300px} .container_16 .suffix_6 {padding-right: 360px} .container_16 .suffix_7 {padding-right: 420px} .container_16 .suffix_9 {padding-right: 540px} .container_16 .suffix_10 {padding-right: 600px} .container_16 .suffix_11 {padding-right: 660px} .container_16 .suffix_13 {padding-right: 780px} .container_16 .suffix_14 {padding-right: 840px} .container_16 .suffix_15 {padding-right: 900px} .container_12 .push_3, .container_16 .push_4 {left: 240px} .container_12 .push_6, .container_16 .push_8 {left: 480px} .container_12 .push_9, .container_16 .push_12 {left: 720px} .container_12 .push_1 {left: 80px} .container_12 .push_2 {left: 160px} .container_12 .push_4 {left: 320px} .container_12 .push_5 {left: 400px} .container_12 .push_7 {left: 560px} .container_12 .push_8 {left: 640px} .container_12 .push_10 {left: 800px} .container_12 .push_11 {left: 880px} .container_16 .push_1 {left: 60px} .container_16 .push_2 {left: 120px} .container_16 .push_3 {left: 180px} .container_16 .push_5 {left: 300px} .container_16 .push_6 {left: 360px} .container_16 .push_7 {left: 420px} .container_16 .push_9 {left: 540px} .container_16 .push_10 {left: 600px} .container_16 .push_11 {left: 660px} .container_16 .push_13 {left: 780px} .container_16 .push_14 {left: 840px} .container_16 .push_15 {left: 900px} .container_12 .pull_3, .container_16 .pull_4 {left: -240px} .container_12 .pull_6, .container_16 .pull_8 {left: -480px} .container_12 .pull_9, .container_16 .pull_12 {left: -720px} .container_12 .pull_1 {left: -80px} .container_12 .pull_2 {left: -160px} .container_12 .pull_4 {left: -320px} .container_12 .pull_5 {left: -400px} .container_12 .pull_7 {left: -560px} .container_12 .pull_8 {left: -640px} .container_12 .pull_10 {left: -800px} .container_12 .pull_11 {left: -880px} .container_16 .pull_1 {left: -60px} .container_16 .pull_2 {left: -120px} .container_16 .pull_3 {left: -180px} .container_16 .pull_5 {left: -300px} .container_16 .pull_6 {left: -360px} .container_16 .pull_7 {left: -420px} .container_16 .pull_9 {left: -540px} .container_16 .pull_10 {left: -600px} .container_16 .pull_11 {left: -660px} .container_16 .pull_13 {left: -780px} .container_16 .pull_14 {left: -840px} .container_16 .pull_15 {left: -900px} .clear {clear: both; display: block; overflow: hidden; visibility: hidden; width: 0; height: 0} .clearfix: after {clear: both; content: ' '; display: block; font-size: 0; line-height: 0; visibility: hidden; width: 0; height: 0} * html .clearfix {height: 1%}
body { font-family: "Times New Roman", "Bitstream Vera Serif", Times, serif; font-size: 90%; line-height: 1; } h1 { font-size: 4em; } h2 { font-size: 2em; } h3 { font-size: 1.7em; } h4 { font-size: 1.5em; } h5 { font-size: 1.3em; } h6 { font-size: 1.1em; } h2, h3, h4, h5, h6 { margin: 0.4em 0 0.6em; } a { color: #006; text-decoration: none; } a:hover { color: #009; } abbr { border-bottom: dotted 1px #aaa; cursor: help; } tt, code { font-family: 'Monaco', Courier, monospace; } code { display: block; padding: 1em; padding-bottom: 0; margin: 1em 0 1em; } table.form caption { font-size: 1.2em; padding: 0.2em 0 0.3em; } table.form th, table.form td { padding: 0.2em; } #body { line-height: 140%; } #body h2 span { float: right; padding-right: 1em; font-weight: bold; font-size: 0.6em; } #body em { font-style: italic; } #body strong { font-weight: bold; } #body p { padding-bottom: 1em; } #body ul, #body ol { padding-left: 1.5em; margin-bottom: 1em; list-style: square; line-height: 180%; } #body ol { list-style: decimal; } #body form fieldset { padding: 0.5em 0; } #body form .legend { display: block; padding: 0.5em; } #body form ul { display: block; padding: 0.5em 1em 0; list-style: none; } #body form p.error { font-weight: bold; padding: 0.5em 1em 0; color: #600; } #body .intro { font-size: 1.6em; line-height: 1.4em; } #body .intro strong { font-weight: bold; white-space: nowrap; } #body .note { font-weight: bold; font-size: 0.9em; color: #225; } #footer { padding: 1em 4em; text-transform: uppercase; text-align: center; color: #eee; font-size: 0.8em; }
div {margin-top: 10px;} ul {float: none;} ul li { float: left; margin: 10px 10px 0 0; } dl { display: block; text-align: center; } dl dd a { font: 1em Arial, sans-serif; color: #008cd2; } dl dt a img { padding: 1px; background: #ddd; } .img-border { border: 1px solid #ddd; } .declaration { font-size: 2em; font-family: arial; line-height: 140%; color: #404040; } .declaration p { margin-bottom: 1em; } .alert { color: #f00; } .user-flow { clear: both; float: left; margin: 30px 0; } .user-flow-item { margin: 0 0 40px 0; } dt img { border: 1px solid #ccc; } .summary { margin: -50px 0 0 60px; font-size: 1.08em; } .search { margin-top: -45px; } .who-n-when { margin: 0 0 10px 0; color: #aeaeae; } a { letter-spacing: -1px; color: #aeaeae; } .blog-name { color: #79b1d4; } dt { font: 2em/110% Verdana, sans-serif; } dd { margin-top: 5px; font: .83em/100% Verdana, sans-serif; }
